{
  "files_data": [
    {
      "filename": "test_upload.py",
      "content": "# test_upload.py\nfrom file_management import FileManagementHelper\n\n\ndef test_file_upload():\n    helper = FileManagementHelper()\n\n    # Create test content\n    with open('test.txt', 'w') as f:\n        f.write(\"Hello World! This is a test file.\")\n\n    print(\"1. Testing file upload...\")\n    # Upload text file\n    metadata = helper.save_file_to_s3_and_db(\n        'test.txt',\n        s3_subfolder='test'\n    )\n\n    if metadata:\n        print(\"\\n2. File uploaded successfully:\")\n        print(f\"File ID: {metadata['id']}\")\n        print(f\"S3 Key: {metadata['s3_key']}\")\n\n        # Generate URL\n        print(\"\\n3. Generating download URL...\")\n        url = helper.get_download_url(metadata['id'])\n        print(f\"Download URL: {url}\")\n        print(\"\\nTry opening this URL in your browser\")\n\n        # Also verify file exists in S3\n        print(\"\\n4. Verifying file in S3...\")\n        try:\n            helper.s3.head_object(\n                Bucket=helper.bucket,\n                Key=metadata['s3_key']\n            )\n            print(\"âœ“ File verified in S3\")\n        except Exception as e:\n            print(f\"Error verifying file: {str(e)}\")\n\n\nif __name__ == \"__main__\":\n    test_file_upload()"
    }
  ],
  "compliance_file_data": null,
  "additional_files": [],
  "output_types": ["review", "documentation"],
  "provider": "openai",
  "model_name": "gpt-4o-mini"
}
