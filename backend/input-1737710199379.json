{"files_data":[{"filename":"translate.py","content":"import azure.cognitiveservices.speech as speechsdk\r\nimport time\r\nimport os\r\nfrom dotenv import load_dotenv\r\nload_dotenv()\r\nAzure_Key = os.getenv(\"azure_key\")\r\nAzure_Region = os.getenv(\"azure_region\")\r\nAzure_API = os.getenv(\"azure_api\")\r\n\r\n\r\nclass AudioFileTranslator:\r\n    def __init__(self, speech_key, speech_region):\r\n        self.speech_key = speech_key\r\n        self.speech_region = speech_region\r\n        self.is_running = False\r\n        \r\n    def setup_translation(self, source_language, target_language, audio_file_path):\r\n        \"\"\"Setup translation with optimized configurations\"\"\"\r\n        self.speech_config = speechsdk.SpeechConfig(\r\n            subscription=self.speech_key,\r\n            region=self.speech_region\r\n        )\r\n        \r\n        self.speech_config.speech_recognition_language = source_language\r\n        self.speech_config.speech_synthesis_language = target_language\r\n        \r\n        self.translation_config = speechsdk.translation.SpeechTranslationConfig(\r\n            subscription=self.speech_key,\r\n            region=self.speech_region,\r\n            speech_recognition_language=source_language,\r\n            target_languages=[target_language]\r\n        )\r\n\r\n        \r\n        self.audio_config = speechsdk.audio.AudioConfig(filename=audio_file_path)\r\n        \r\n        self.synthesizer = speechsdk.SpeechSynthesizer(\r\n            speech_config=self.speech_config\r\n        )\r\n\r\n    def synthesize_speech(self, text, output_filename):\r\n        \"\"\"Synthesize speech with error handling\"\"\"\r\n        try:\r\n            \r\n            audio_output_config = speechsdk.audio.AudioOutputConfig(filename=output_filename)\r\n            synthesizer = speechsdk.SpeechSynthesizer(\r\n                speech_config=self.speech_config, \r\n                audio_config=audio_output_config\r\n            )\r\n            \r\n            result = synthesizer.speak_text_async(text).get()\r\n            if result.reason == speechsdk.ResultReason.Canceled:\r\n                cancellation_details = result.cancellation_details\r\n                print(f\"Speech synthesis canceled: {cancellation_details.reason}\")\r\n                if cancellation_details.reason == speechsdk.CancellationReason.Error:\r\n                    print(f\"Error details: {cancellation_details.error_details}\")\r\n            return result\r\n        except Exception as e:\r\n            print(f\"Error in speech synthesis: {str(e)}\")\r\n            return None\r\n\r\n    def translate_audio(self):\r\n        \"\"\"Translate audio file\"\"\"\r\n        print(\"\\nStarting translation...\")\r\n        \r\n        recognizer = speechsdk.translation.TranslationRecognizer(\r\n            translation_config=self.translation_config,\r\n            audio_config=self.audio_config\r\n        )\r\n\r\n        translation_complete = False\r\n        translated_text = []\r\n\r\n        def handle_result(evt):\r\n            if evt.result.reason == speechsdk.ResultReason.TranslatedSpeech:\r\n                original_text = evt.result.text\r\n                translated = evt.result.translations[list(evt.result.translations.keys())[0]]\r\n                \r\n                print(f\"\\nOriginal: {original_text}\")\r\n                print(f\"Translated: {translated}\")\r\n                translated_text.append(translated)\r\n\r\n        def handle_canceled(evt):\r\n            print(f\"Translation canceled: {evt.result.cancellation_details.reason}\")\r\n\r\n        def stop_translation(evt):\r\n            nonlocal translation_complete\r\n            translation_complete = True\r\n            print(\"\\nTranslation completed.\")\r\n\r\n        \r\n        recognizer.recognized.connect(handle_result)\r\n        recognizer.canceled.connect(handle_canceled)\r\n        recognizer.session_stopped.connect(stop_translation)\r\n        recognizer.session_started.connect(lambda evt: print(\"Translation started...\"))\r\n\r\n        \r\n        recognizer.start_continuous_recognition()\r\n        while not translation_complete:\r\n            time.sleep(0.5)\r\n        recognizer.stop_continuous_recognition()\r\n\r\n        return \" \".join(translated_text)\r\n\r\n\r\ndef display_language_menu():\r\n    \"\"\"Display an interactive menu for language selection\"\"\"\r\n    language_names = {\r\n        'es-BN': 'Spanish (Bolivia)',\r\n        'bg-BG': 'Bulgarian',\r\n        'ca-ES': 'Catalan',\r\n        'zh-CN': 'Chinese (Mainland)',\r\n        'zh-HK': 'Chinese (Hong Kong)',\r\n        'zh-TW': 'Chinese (Taiwan)',\r\n        'hr-HR': 'Croatian',\r\n        'cs-CZ': 'Czech',\r\n        'da-DK': 'Danish',\r\n        'nl-NL': 'Dutch',\r\n        'en-AU': 'English (Australia)',\r\n        'en-CA': 'English (Canada)',\r\n        'en-GH': 'English (Ghana)',\r\n        'en-HK': 'English (Hong Kong)',\r\n        'en-IN': 'English (India)',\r\n        'en-IE': 'English (Ireland)',\r\n        'en-KE': 'English (Kenya)',\r\n        'en-NZ': 'English (New Zealand)',\r\n        'en-NG': 'English (Nigeria)',\r\n        'en-PH': 'English (Philippines)',\r\n        'en-SG': 'English (Singapore)',\r\n        'en-ZA': 'English (South Africa)',\r\n        'en-TZ': 'English (Tanzania)',\r\n        'en-GB': 'English (UK)',\r\n        'en-US': 'English (US)',\r\n        'et-EE': 'Estonian',\r\n        'fi-FI': 'Finnish',\r\n        'fr-CA': 'French (Canada)',\r\n        'fr-FR': 'French (France)',\r\n        'de-DE': 'German',\r\n        'el-GR': 'Greek',\r\n        'gu-IN': 'Gujarati',\r\n        'he-IL': 'Hebrew',\r\n        'hi-IN': 'Hindi',\r\n        'hu-HU': 'Hungarian',\r\n        'id-ID': 'Indonesian',\r\n        'ga-IE': 'Irish',\r\n        'it-IT': 'Italian',\r\n        'ja-JP': 'Japanese',\r\n        'kn-IN': 'Kannada',\r\n        'ko-KR': 'Korean',\r\n        'lv-LV': 'Latvian',\r\n        'lt-LT': 'Lithuanian',\r\n        'mt-MT': 'Maltese',\r\n        'mr-IN': 'Marathi',\r\n        'nb-NO': 'Norwegian',\r\n        'pl-PL': 'Polish',\r\n        'pt-BR': 'Portuguese (Brazil)',\r\n        'pt-PT': 'Portuguese (Portugal)',\r\n        'ro-RO': 'Romanian',\r\n        'ru-RU': 'Russian',\r\n        'sk-SK': 'Slovak',\r\n        'sl-SI': 'Slovenian',\r\n        'es-AR': 'Spanish (Argentina)',\r\n        'es-BO': 'Spanish (Bolivia)',\r\n        'es-CL': 'Spanish (Chile)',\r\n        'es-CO': 'Spanish (Colombia)',\r\n        'es-CR': 'Spanish (Costa Rica)',\r\n        'es-CU': 'Spanish (Cuba)',\r\n        'es-DO': 'Spanish (Dominican Republic)',\r\n        'es-EC': 'Spanish (Ecuador)',\r\n        'es-SV': 'Spanish (El Salvador)',\r\n        'es-GQ': 'Spanish (Equatorial Guinea)',\r\n        'es-GT': 'Spanish (Guatemala)',\r\n        'es-HN': 'Spanish (Honduras)',\r\n        'es-MX': 'Spanish (Mexico)',\r\n        'es-NI': 'Spanish (Nicaragua)',\r\n        'es-PA': 'Spanish (Panama)',\r\n        'es-PY': 'Spanish (Paraguay)',\r\n        'es-PE': 'Spanish (Peru)',\r\n        'es-PR': 'Spanish (Puerto Rico)',\r\n        'es-ES': 'Spanish (Spain)',\r\n        'es-UY': 'Spanish (Uruguay)',\r\n        'es-US': 'Spanish (US)',\r\n        'es-VE': 'Spanish (Venezuela)',\r\n        'sv-SE': 'Swedish',\r\n        'ta-IN': 'Tamil',\r\n        'te-IN': 'Telugu',\r\n        'th-TH': 'Thai',\r\n        'tr-TR': 'Turkish',\r\n        'uk-UA': 'Ukrainian',\r\n        'vi-VN': 'Vietnamese',\r\n        'ar-AE': 'Arabic'\r\n    }\r\n    \r\n    languages = list(language_names.items())\r\n    \r\n    print(\"\\nAvailable Languages:\")\r\n    print(\"-\" * 80)\r\n    \r\n    for i in range(0, len(languages), 3):\r\n        for j in range(3):\r\n            if i + j < len(languages):\r\n                idx = i + j\r\n                print(f\"{idx + 1:3d}) {languages[idx][1]:<25}\", end=\"\")\r\n        print()\r\n    \r\n    while True:\r\n        try:\r\n            print(\"\\nSelect source language (enter number):\")\r\n            source_idx = int(input()) - 1\r\n            if 0 <= source_idx < len(languages):\r\n                source_code = languages[source_idx][0]\r\n                source_name = languages[source_idx][1]\r\n                break\r\n            print(\"Invalid selection. Please try again.\")\r\n        except ValueError:\r\n            print(\"Please enter a valid number.\")\r\n    \r\n    while True:\r\n        try:\r\n            print(\"\\nSelect target language (enter number):\")\r\n            target_idx = int(input()) - 1\r\n            if 0 <= target_idx < len(languages):\r\n                target_code = languages[target_idx][0]\r\n                target_name = languages[target_idx][1]\r\n                \r\n                if source_code == target_code:\r\n                    print(\"Source and target languages cannot be the same. Please choose a different target language.\")\r\n                    continue\r\n                break\r\n            print(\"Invalid selection. Please try again.\")\r\n        except ValueError:\r\n            print(\"Please enter a valid number.\")\r\n    \r\n    print(f\"\\nSelected languages:\")\r\n    print(f\"Source: {source_name} ({source_code})\")\r\n    print(f\"Target: {target_name} ({target_code})\")\r\n    \r\n    return source_code, target_code\r\n\r\n\r\ndef main():\r\n    SPEECH_KEY = Azure_Key\r\n    SPEECH_REGION = Azure_Region\r\n    \r\n    print(\"Audio File Translator\")\r\n    print(\"-------------------\")\r\n    \r\n    \r\n    while True:\r\n        audio_file = input(\"\\nEnter the path to your WAV file: \")\r\n        if os.path.exists(audio_file) and audio_file.lower().endswith('.wav'):\r\n            break\r\n        print(\"Invalid file path or not a WAV file. Please try again.\")\r\n\r\n    source_lang, target_lang = display_language_menu()\r\n    \r\n    translator = AudioFileTranslator(SPEECH_KEY, SPEECH_REGION)\r\n    \r\n    try:\r\n        \r\n        translator.setup_translation(source_lang, target_lang, audio_file)\r\n        \r\n        \r\n        translated_text = translator.translate_audio()\r\n        \r\n        \r\n        output_filename = f\"translated_output_{os.path.basename(audio_file)}\"\r\n        \r\n        \r\n        print(f\"\\nGenerating translated audio file: {output_filename}\")\r\n        translator.synthesize_speech(translated_text, output_filename)\r\n        \r\n        print(f\"\\nTranslation completed!\")\r\n        print(f\"Original audio: {audio_file}\")\r\n        print(f\"Translated audio: {output_filename}\")\r\n        \r\n    except Exception as e:\r\n        print(f\"\\nError: {str(e)}\")\r\n    \r\n    print(\"\\nThank you for using Audio File Translator!\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()"}],"compliance_file_data":null,"additional_files":[],"output_types":["review","documentation"],"provider":"openai","model_name":"gpt-4o-mini"}