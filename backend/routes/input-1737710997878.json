{"files_data":[{"filename":"test_existing.py","content":"# test_existing.py\nfrom file_management import FileManagementHelper\n\n\ndef test_existing_file():\n    helper = FileManagementHelper()\n\n    # First, let's try to find files by their names\n    print(\"1. Listing existing files...\\n\")\n    files = helper.get_file_by_name('file.txt')\n\n    if not files:\n        print(\"No files found with name 'file.txt'\")\n        # Let's try with test.txt\n        files = helper.get_file_by_name('test.txt')\n        if not files:\n            print(\"No files found with name 'test.txt' either\")\n            return\n\n    # Print all found files\n    print(f\"Found {len(files)} files:\")\n    for idx, file in enumerate(files, 1):\n        print(f\"\\nFile {idx}:\")\n        print(f\"ID: {file['id']}\")\n        print(f\"S3 Key: {file['s3_key']}\")\n        print(f\"Upload Time: {file['timestamp']}\")\n\n        # Generate URL for each file\n        print(\"\\nGenerating download URL...\")\n        url = helper.get_download_url(file['id'])\n        if url:\n            print(f\"Download URL: {url}\")\n\n            # Verify file still exists in S3\n            try:\n                helper.s3.head_object(\n                    Bucket=helper.bucket,\n                    Key=file['s3_key']\n                )\n                print(\"âœ“ File verified in S3\")\n            except Exception as e:\n                print(f\"Error verifying file: {str(e)}\")\n        else:\n            print(\"Failed to generate URL\")\n\n\nif __name__ == \"__main__\":\n    test_existing_file()"}],"output_types":["review","documentation"],"provider":"openai","model_name":"gpt-4o-mini"}